image:
  - Ubuntu
  - Visual Studio 2019


matrix:
  fast_finish: true


environment:
  MSBUILDDISABLENODEREUSE: 1
  APPVEYOR_SSH_KEY: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDB4/XKPp5XE1xSkrw2dAQwiSz0Xh1Kl3Q8vOytxyJm10FZjPpA5hXS5z1NGqnDZoROcNntBKm5Uj/lCv8Z0bEKZhD8ILuHzqa/4KgvbTvzanrbIxNhPhu5Ny4NWzugF6BJIpgsXMmNGyVE4KdQ0qa0xI1UIHMQMx74ih+knNEaQyGccULS/rw0nVhhNXEezh6Ia6R5Al6kop3KR9eJnJQ8x4MeRwjsRytEM9bMS6HECZWXlPy1Xw/TzPmUXGaY3oY7DVJLObsyc8z12I+T7w7j4VaAJ2uji5dIrkntWpr2k1uQu//2AoU0ullblb7A7j+Weog47exA/gdX6kFikT2r appveyor
  sshKeyEncryptionSecret:
    secure: YxpCTXzimLxFE18bQJPIzD1n5WyQK/M/rVuGvtrM/SJ/HzGTGK43v4zO9xSeiK4F

  matrix:
    # This dimension of build matrix controls our intention to produce NuGet packages.
    # Producing packages also implies building and testing against NuGet dependencies.
    - producePackages: false
    - producePackages: true


init:
  - sh: curl -sflL 'https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-ssh.sh' | bash -e -

  # Skip Windows-only repositories on Linux
  - ps: |
      if ($env:APPVEYOR_REPO_NAME -like '*windows*' -and $isLinux) { Exit-AppveyorBuild }
      if ($env:APPVEYOR_REPO_NAME -like '*sys.metrics.etw*' -and $isLinux) { Exit-AppveyorBuild }
      if ($env:APPVEYOR_REPO_NAME -like '*sys.metrics*' -and $isLinux) { Exit-AppveyorBuild } # TODO (epeshk, 21.11.2018) think about better way for excluding win-only repos
   

  # Get rid of default AppVeyor build version (might want to pull a real one from .csproj later):
  - ps: |
      if ($env:APPVEYOR_REPO_TAG_NAME -ne $null) 
      { 
        Update-AppveyorBuild -Version "$env:APPVEYOR_REPO_TAG_NAME-$env:APPVEYOR_BUILD_NUMBER" 
      }
      else 
      {
        Update-AppveyorBuild -Version "$env:APPVEYOR_REPO_BRANCH-$env:APPVEYOR_BUILD_NUMBER"
      }


  # Determine whether we'll need to deploy to NuGet
  - ps: |
      $isMasterBranch = $env:APPVEYOR_REPO_BRANCH -eq "master"
      $isReleaseBranch = $env:APPVEYOR_REPO_BRANCH.StartsWith("release/")
      $hasReleaseTag = $env:APPVEYOR_REPO_TAG_NAME -ne $null -and $env:APPVEYOR_REPO_TAG_NAME.StartsWith("release/")
      $hasPrereleaseTag = $env:APPVEYOR_REPO_TAG_NAME -ne $null -and $env:APPVEYOR_REPO_TAG_NAME.StartsWith("prerelease/")
      $needToProducePackages = $env:producePackages -eq "true"
      $needToPublishRelease = $hasReleaseTag -and ($isMasterBranch -or $isReleaseBranch)
      $needToPublishPrerelease = $hasPrereleaseTag -or $isMasterBranch
      $needToPatchVersion = $needToProducePackages -and $needToPublishPrerelease -and (-not $needToPublishRelease)
      $needToDeploy = $needToProducePackages -and ($needToPublishRelease -or $needToPublishPrerelease)

      Write-Host "Need to publish release = $needToPublishRelease"
      Write-Host "Need to publish prerelease = $needToPublishPrerelease"
      Write-Host "Need to patch version = $needToPatchVersion"
      Write-Host "Need to deploy to NuGet = $needToDeploy"

      # We don't need to run 2 job configurations specialized on NuGet when there's no intention to deploy at all.
      if ($needToProducePackages -and -not $needToDeploy) { Exit-AppveyorBuild }

      # Using marker files as a workaround for somehow not being able to share dynamic env. variables between scripts:
      if ($needToPatchVersion) { New-Item -Path .. -Name ".need-to-patch-version" -ItemType "file" }
      if ($needToDeploy) { New-Item -Path .. -Name ".need-to-deploy" -ItemType "file" }



install:
  # Install Cement:
  # Step 1: determine paths to folders and executable, setup env. variables.
  # Step 2: download and unpack a release with binaries.
  # Step 3: setup appropriate Cement settings.
  - ps: |
      $ErrorActionPreference = "Stop"
      $cementBaseDirectory = if ($isLinux) { "~/bin" } else { "$env:USERPROFILE\bin" }
      $cementDirectory = if ($isLinux) { "$cementBaseDirectory/dotnet" } else { "$cementBaseDirectory\dotnet" }
      Invoke-WebRequest "https://github.com/skbkontur/cement/releases/download/v1.0.61/189c047ed7ee17ad9fc52aa3e41ca84944a1b9bc.zip" -Out "cement.zip"
      Expand-Archive "cement.zip" -Force -DestinationPath "$cementBaseDirectory"

  # Make Cement easily callable by typing 'cm':
  - sh: alias cm='mono ~/bin/dotnet/cm.exe'
  - cmd: set PATH=%USERPROFILE%\bin\dotnet;%PATH%

  # Update Cement to latest version and display it (iloktionov: temporarily disabled it on Jan. 9, 2019 due to instability):
  # - cm self-update
  - sh: mono ~/bin/dotnet/cm.exe --version
  - cmd: cm --version

  # Init parent directory to become Cement-tracked:
  - sh: pushd .. && mono ~/bin/dotnet/cm.exe init && popd
  - cmd: pushd .. && cm init && popd

  # Fetch 'vostok.devtools' module:
  - sh: pushd .. && mono ~/bin/dotnet/cm.exe get vostok.devtools && popd
  - cmd: pushd .. && cm get vostok.devtools && popd

  # Build and install 'dotnetversionsuffix' CLI tool:
  - cmd: pushd ..\vostok.devtools\dotnetversionsuffix && dotnet build -c Release && popd
  - cmd: dotnet tool install --add-source ..\vostok.devtools\dotnetversionsuffix/nupkg -g dotnetversionsuffix
  - sh: pushd ../vostok.devtools/dotnetversionsuffix && dotnet build -c Release && popd
  - sh: dotnet tool install --add-source ../vostok.devtools/dotnetversionsuffix/nupkg -g dotnetversionsuffix

  # Build and install 'dotnetcementrefs' CLI tool:
  - cmd: pushd ..\vostok.devtools\dotnetcementrefs && dotnet build -c Release && popd
  - cmd: dotnet tool install --add-source ..\vostok.devtools\dotnetcementrefs/nupkg -g dotnetcementrefs
  - sh: pushd ../vostok.devtools/dotnetcementrefs && dotnet build -c Release && popd
  - sh: dotnet tool install --add-source ../vostok.devtools/dotnetcementrefs/nupkg -g dotnetcementrefs

  # Build and install 'configureawaitfalse' CLI tool:
  - cmd: pushd ..\vostok.devtools\configure-await-false && dotnet build -c Release && popd
  - cmd: dotnet tool install --add-source ..\vostok.devtools\configure-await-false/nupkg -g configureawaitfalse
  - sh: pushd ../vostok.devtools/configure-await-false && dotnet build -c Release && popd
  - sh: dotnet tool install --add-source ../vostok.devtools/configure-await-false/nupkg -g configureawaitfalse

  # Build and install 'tcscreateoptions' CLI tool:
  - cmd: pushd ..\vostok.devtools\tcs-create-options && dotnet build -c Release && popd
  - cmd: dotnet tool install --add-source ..\vostok.devtools\tcs-create-options/nupkg -g tcscreateoptions
  - sh: pushd ../vostok.devtools/tcs-create-options && dotnet build -c Release && popd
  - sh: dotnet tool install --add-source ../vostok.devtools/tcs-create-options/nupkg -g tcscreateoptions


before_build:
  - ps: |
  
        # Setup dotnet tool:
  
        # dotnet --info
        # dotnet --version 
        # dotnet new globaljson --sdk-version 2.2.401 --force
        # dotnet --version 
        
  - ps: |

      # Check C# source code for 'await' expressions without ConfigureAwait(false):

      Foreach ($dir in Get-ChildItem "." | Where-Object { $_.PSIsContainer -and -not $_.Name.EndsWith(".Tests") }) 
      {
        Write-Host "Checking '$($dir.FullName)' directory for unconfigured awaits in source code.."

        configureawaitfalse $dir.FullName

         # Fail build if there were any unconfigured awaits:
        if ($LASTEXITCODE -ne 0) { throw "There were some unconfigured awaits in source code." }
      }

  - ps: |

      # Check C# source code for 'TaskCompletionSource' creations without configured 'TaskCreationOptions':

      Foreach ($dir in Get-ChildItem "." | Where-Object { $_.PSIsContainer -and -not $_.Name.EndsWith(".Tests") }) 
      {
        Write-Host "Checking '$($dir.FullName)' directory for unconfigured TaskCompletionSource creations in source code.."

        tcscreateoptions $dir.FullName

         # Fail build if there were any unconfigured TaskCompletionSource creations:
        if ($LASTEXITCODE -ne 0) { throw "There were some unconfigured TaskCompletionSource creations in source code." }
      }

  - ps: |

      # Add version suffix to project if we are in a prerelease build. 
      if (Test-Path -Path "../.need-to-patch-version") {
        $versionSuffix = "pre" + [convert]::ToInt32($env:APPVEYOR_BUILD_NUMBER, 10).ToString("000000")

        dotnetversionsuffix $versionSuffix

        if ($LASTEXITCODE -ne 0) { throw "Failed to convert Cement references to package references." }
      }


build_script:
  - cmd: cm update-deps 
  - sh: mono ~/bin/dotnet/cm.exe update-deps 

  - ps: |

      # Patch Cement references in projects and convert them to NuGet package references if we are to deploy later: 
      if (Test-Path -Path "../.need-to-deploy") {
        
        dotnetcementrefs

        if ($LASTEXITCODE -ne 0) { throw "Failed to convert Cement references to package references." }
      }

  - sh: |
      if [ ! -f ../.need-to-deploy ];
      then
      mono ~/bin/dotnet/cm.exe build-deps
      fi
    
  - cmd: if not exist "../.need-to-deploy" cm build-deps


  - dotnet restore
  - dotnet build -c Release


test_script:
  - ps: |

      # Locate tests project folder:
      $testProjectFolder = Get-ChildItem "." | Where-Object { $_.PSIsContainer -and $_.Name.EndsWith(".Tests") } | Select-Object -First 1 | % { $_.FullName }

      if ($testProjectFolder) {
        
        # Add a reference to an external AppVeyor logger to test project:
        
        Push-Location
        Set-Location "$testProjectFolder"
        dotnet add reference "../../vostok.devtools/library-ci/logger/Appveyor.TestLogger.csproj"
        Pop-Location
        
        # Run 'dotnet test' command there:
        # Note: Some libraries have known issues on Linux. We don't want these libraries to fail our release. (tsup, 28.06.2021)
        if ($isLinux -and $needToPublishRelease -and (
            $env:APPVEYOR_REPO_NAME -like '*servicediscovery*' -or
            $env:APPVEYOR_REPO_NAME -like '*zookeeper*' -or
            $env:APPVEYOR_REPO_NAME -like '*hercules.client*')){ 
          dotnet test -c Release --test-adapter-path:. --logger "AppVeyor" "$testProjectFolder" ; $LASTEXITCODE = 0
        }
        else {
          dotnet test -c Release --test-adapter-path:. --logger "AppVeyor" "$testProjectFolder"
        }
        
        # Fail build if there were any failed tests:
        if ($LASTEXITCODE -ne 0) { throw "There were some failed tests." }
      } else {
        
        Write-Host "There are no tests to run."
      }


after_test:
  - ps: | 
      if (Test-Path -Path "../.need-to-deploy") {

        # Create NuGet packages based on metadata in .csproj: 
        dotnet pack -c Release

        if ($LASTEXITCODE -ne 0) { throw "Failed to produce NuGet packages." }
      }


artifacts:
  - path: '**\*.nupkg'
  - path: '**\*.snupkg'


# The purpose of this 'for' scope is to prevent deployment unless we are on Windows and need to deploy packages.
# This ensures that we do not deploy unless everything builds and passes tests in all configurations.
# However, there are a couple of assumptions here:
# 1. Matrix jobs are defined in the order where (Windows + packages) is the last one.
# 2. Matrix jobs are executed by AppVeyor in the order they are defined.
# 3. Fail fast is enabled in this config.
for:
  -
    matrix:
      only:
        - image: Visual Studio 2019
          producePackages: true
  
    deploy:
      provider: Environment
      name: nuget-org


notifications:
  - provider: Slack
    incoming_webhook:
      secure: ZK5UUIckrg0IC/TbkGc4zNt7WGd2DEbMzDsxxlp3lo+z+rXafaC8AHp2H60JhHRvTMpHQsbQqGF03PQW8KgqJJg3yDUt5ODCmaz1BXZxQeg=
    on_build_success: false
    on_build_failure: true
    on_build_status_changed: false
